Run at ServerWhen to Run: BeforeRun on Insert or UpdateCondition: current.problem_state.changes() && (current.problem_state == 9 || current.problem_state == 6 || current.problem_state == 4 current.problem_state == 7)function onBefore(current, previous) {     //This function will be automatically called when this rule is processed.      gs.include('DurationCalculator');   var time_elapsed = executeSample(current.sys_created_on,current.closed_at);   var workday = 32400;   var time_elapsed_1 = time_elapsed/workday;   time_elapsed = time_elapsed_1.toFixed(1);   current.u_problem_duration = time_elapsed;  }  function executeSample(sDate,eDate) {    // First we need a DurationCalculator object.   var dc = new global.DurationCalculator();   // The above sample is useful in limited cases. We almost always want to  // use some schedule in a duration computation, let's load a schedule.  addSchedule(dc);   // Compute a duration using the schedule. The schedule   // specifies a nine hour work day. The output of this is 32400 seconds, or   // a nine hour span.   dur = dc.calcScheduleDuration(sDate,eDate);   gs.info("calcScheduleDuration with schedule with Dynamic Values: " + dur);   return dur;  }  function addSchedule(durationCalculator) {    //  Load the "M-F Workday" schedule into our duration calculator.   var scheduleName = "M-F Workday";   var grSched = new GlideRecord('cmn_schedule');   grSched.addQuery('name', scheduleName);   grSched.query();  if (!grSched.next()) {   gs.log('*** Could not find schedule "' + scheduleName + '"');   return;   }    durationCalculator.setSchedule(grSched.getUniq
